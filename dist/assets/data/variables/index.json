{"hash":"fb59f7e01bc08ffdce15b2b56b97a3724d52628a","data":{"doc":{"title":"Variables","path":"/variables/","date":"30. April 2020","timeToRead":1,"content":"<p>Variables are named slots for storing values. You define a new variable in Ghost using a <code class=\"language-text\">var</code> statement, like so:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre>\n<p>This creates a new variable <code class=\"language-text\">a</code> in the current scope and initializes it with the result of the expression following the <code class=\"language-text\">=</code>. Once a variable has been defined, it can be accessed by name as you would expect.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">var</span> technology <span class=\"token operator\">=</span> <span class=\"token string\">\"Micromachines\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>technology<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<h2 id=\"scope\"><a href=\"#scope\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Scope</h2>\n<p>Ghost has true block scope: a variable exists from the point where it is defined until the end of the block where that definition appears.</p>\n<pre class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error: \"a\" doesn't exist yet.</span>\n\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error: \"a\" doesn't exist anymore.</span></pre>\n<p>Variables defined at the top level of a script are <em>top-level</em>, or <em>global</em>. All other variables are <em>local</em>. Declaring a variable in an inner scope with the same name as an outer one is called <em>shadowing</em> and is not an error.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"outer\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"inner\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// inner</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// outer</span></pre>\n<p>On the other hand, declaring a variable with the same name in the <em>same</em> scope <em>is</em> an error.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"again\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error: \"a\" is already declared.</span></pre>\n<h2 id=\"assignment\"><a href=\"#assignment\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Assignment</h2>\n<p>After a variable has been declared, you can assign to it using <code class=\"language-text\">=</code>:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\na <span class=\"token operator\">=</span> <span class=\"token number\">456</span><span class=\"token punctuation\">;</span></pre>\n<p>An assignmet walks up the scope stack to find where the named variable is declared. It's an error to assign to a variable that isn't defined. Ghost does not support implicit variable definition.</p>\n"}},"context":{}}