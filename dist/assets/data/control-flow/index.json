{"hash":"fb59f7e01bc08ffdce15b2b56b97a3724d52628a","data":{"doc":{"title":"Control Flow","path":"/control-flow/","date":"29. April 2020","timeToRead":2,"content":"<p>Control flow is used to determine which blocks of code are executed and how many times. <em>Branching</em> statements and expressions decide whether or not to execute some code and <em>looping</em> ones execute something more than once.</p>\n<h2 id=\"truthiness\"><a href=\"#truthiness\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truthiness</h2>\n<h2 id=\"logical-operators\"><a href=\"#logical-operators\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Logical Operators</h2>\n<p>Unlike most other operators in Ghost which are just a special syntax for method calls, the <code class=\"language-text\">and</code> and <code class=\"language-text\">or</code> operators are special. This is because they only conditionally evaluate right operand--they short-circuit.</p>\n<p>An <code class=\"language-text\">and</code> (\"logical and\") expression evaluates the left-hand argument. If it's false, it returns that value. Otherwise it evaluates and returns the right-hand argument.</p>\n<pre class=\"language-javascript\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> and <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> and <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<p>An <code class=\"language-text\">or</code> (\"logical or\") expression is reversed. If the left-hand argument is <em>true</em>, it's returned, otherwise the right-hand argument is evaluated and returned:</p>\n<pre class=\"language-javascript\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> or <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> or <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<h2 id=\"if-statements\"><a href=\"#if-statements\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>If Statements</h2>\n<p>The simplest branching statement, <code class=\"language-text\">if</code> lets you conditionally skip a chunk of code. It looks like this:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ready<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"go!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>This evaluates the parenthesized expression after <code class=\"language-text\">if</code>. It it's true, then the block after the condition is evaluated. Otherwise it is skipped.</p>\n<p>You may also provide an <code class=\"language-text\">else</code> branch. It will be executed if the condition is false:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ready<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"go!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not ready!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></pre>\n<h2 id=\"while-statements\"><a href=\"#while-statements\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>While Statements</h2>\n<p>It's hard to write a useful program without executing some chunk of code repeatedly. To do that, you use looping statements. There are two in Ghost, and they should be familiar if you've used other imperative languages.</p>\n<p>The simplest, a <code class=\"language-text\">while</code> statement executes a chunk of code as long as a condition continues to hold. For example:</p>\n<pre class=\"language-javascript\"><span class=\"token comment\">// Hailstone sequence</span>\n<span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token number\">27</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        n <span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        n <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>This evaluates the expression <code class=\"language-text\">n != 1</code>. If it is true, then it executes the following block. After that, it loops back to the top, and evaluates the condition again. It keeps doing this as long as the condition evaluates to something true.</p>\n<h2 id=\"for-statements\"><a href=\"#for-statements\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>For Statements</h2>\n<p>The second looping statement is the <code class=\"language-text\">for</code> statement. It requires three parts: the <em>initilialization</em>, the <em>condition</em>, and the <em>update</em>. Each of these parts are separated by a <code class=\"language-text\">;</code> and are all required.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>The initialization is performed first, and only once. After that, the condition is tested and, if true, the following block is executed and the update is performed. After that, just like the <code class=\"language-text\">while</code> statement, it loops back and evaluates the condition again. It keeps doing this until the condition evaluates to something false.</p>\n"}},"context":{}}