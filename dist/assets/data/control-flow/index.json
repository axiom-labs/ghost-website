{"hash":"678fa7230e76e93af2c5647dd83825d59fdd75d3","data":{"doc":{"title":"Control Flow","path":"/control-flow/","date":"29. April 2020","timeToRead":1,"content":"<p>Control flow is used to determine which blocks of code are executed and how many times. <em>Branching</em> statements and expressions decide whether or not to execute some code and <em>looping</em> ones execute something more than once.</p>\n<h2 id=\"truthiness\"><a href=\"#truthiness\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Truthiness</h2>\n<h2 id=\"logical-operators\"><a href=\"#logical-operators\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Logical Operators</h2>\n<p>Unlike most other operators in Ghost which are just a special syntax for method calls, the <code class=\"language-text\">and</code> and <code class=\"language-text\">or</code> operators are special. This is because they only conditionally evaluate right operand--they short-circuit.</p>\n<p>An <code class=\"language-text\">and</code> (\"logical and\") expression evaluates the left-hand argument. If it's false, it returns that value. Otherwise it evaluates and returns the right-hand argument.</p>\n<pre class=\"language-javascript\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> and <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> and <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<p>An <code class=\"language-text\">or</code> (\"logical or\") expression is reversed. If the left-hand argument is <em>true</em>, it's returned, otherwise the right-hand argument is evaluated and returned:</p>\n<pre class=\"language-javascript\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> or <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> or <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<h2 id=\"if-statements\"><a href=\"#if-statements\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>If Statements</h2>\n<h2 id=\"while-statements\"><a href=\"#while-statements\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>While Statements</h2>\n<h2 id=\"for-statements\"><a href=\"#for-statements\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>For Statements</h2>\n"}},"context":{}}