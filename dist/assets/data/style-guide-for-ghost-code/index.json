{"hash":"07c20d70f39188a3915560ca46f048b6ffdf785f","data":{"doc":{"title":"Style Guide for Ghost Code","path":"/style-guide-for-ghost-code/","date":"9. May 2020","timeToRead":4,"content":"<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in <a href=\"http://tools.ietf.org/html/rfc2119\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC 2119</a>.</p>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introduction</h2>\n<p>This document gives coding conventions for code written in Ghost.</p>\n<p>Code is read much more often than it is written. The guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Ghost code.</p>\n<p>A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important.</p>\n<p>Many projects have their own coding style guidelines. In the event of any conflicts, such project-specific guides take precedence for that project.</p>\n<h2 id=\"lines\"><a href=\"#lines\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lines</h2>\n<p>There MUST NOT be a hard limit on line length.</p>\n<p>The soft limit on line length MUST be 120 characters.</p>\n<p>Lines SHOULD NOT be longer than 80 characters; lines longer than that SHOULD be split into multiple subsequent lines of no more than 80 characters each.</p>\n<p>There MUST NOT be trailing whitespace at the end of lines.</p>\n<p>Blank lines MAY be added to improve readability and to indicate related blocks of code except where explicitly forbidden.</p>\n<p>There MUST NOT be more than one statement per line.</p>\n<h2 id=\"indenting\"><a href=\"#indenting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Indenting</h2>\n<p>Code MUST use an indent of 4 spaces for each indent level, and MUST NOT use tabs for indenting.</p>\n<h2 id=\"keywords-and-types\"><a href=\"#keywords-and-types\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keywords and Types</h2>\n<p>All Ghost reserved keywords and types MUST be in lower case.</p>\n<p>Any new types and keywords added to future Ghost versions MUST be in lower case.</p>\n<h2 id=\"extends\"><a href=\"#extends\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Extends</h2>\n<p>The <code class=\"language-text\">extends</code> keyword MUST be declared on the same line as the class name.</p>\n<p>The opening brace for the class MUST go on its own line; the closing brace for the class MUST go on the next line after the body.</p>\n<p>Opening braces MUST be on their own line and MUST NOT be preceded or followed by a blank line.</p>\n<p>Closing braces MUST be on their own line and MUST NOT be preceded by a blank line.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ParentClass</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// methods</span>\n<span class=\"token punctuation\">}</span></pre>\n<h2 id=\"methods-and-functions\"><a href=\"#methods-and-functions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Methods and Functions</h2>\n<p>Method and function names MUST NOT be declared with space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis.</p>\n<p>A method declaration looks like the following. Note the placement of parentheses, commas, spaces, and braces:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">fooBarBaz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> arg3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// method body</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>A function declaration looks like the following. Note the placement of parentheses, commas, spaces, and braces.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fooBarBaz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> arg3</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// function body</span>\n<span class=\"token punctuation\">}</span></pre>\n<h2 id=\"method-and-function-arguments\"><a href=\"#method-and-function-arguments\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Method and Function Arguments</h2>\n<p>In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">fooBarBaz</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> arg3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// method body</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<h2 id=\"method-and-function-calls\"><a href=\"#method-and-function-calls\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Method and Function Calls</h2>\n<p>When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis, there MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.</p>\n<pre class=\"language-javascript\">foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bar</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<h2 id=\"control-structures\"><a href=\"#control-structures\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Control Structures</h2>\n<p>The general style rules for control structures are as follows:</p>\n<ul>\n<li>There MUST be one space after the control structure keyword</li>\n<li>There MUST NOT be a space after the opening parenthesis</li>\n<li>There MUST NOT be a space before the closing parenthesis</li>\n<li>There MUST be one space between the closing parenthesis and the opening brace</li>\n<li>The structure body MUST be indented once</li>\n<li>The body MUST be on the next line after the opening brace</li>\n<li>The closing brace MUST be on the next line after the body</li>\n</ul>\n<p>The body of each structure MUST be enclosed by braces.</p>\n<h2 id=\"if-else-if-else\"><a href=\"#if-else-if-else\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>if, else if, else</h2>\n<p>An <code class=\"language-text\">if</code> structure looks like the following. Note the placement of parentheses, spaces, and braces; and that <code class=\"language-text\">else</code> and <code class=\"language-text\">else if</code> are on the same line as the closing brace from the earlier body.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// if body</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// else if body</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// else body</span>\n<span class=\"token punctuation\">}</span></pre>\n<h2 id=\"while\"><a href=\"#while\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>while</h2>\n<p>A <code class=\"language-text\">while</code> statement looks like the following. Note the placement of parentheses, spaces, and braces.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// structure body</span>\n<span class=\"token punctuation\">}</span></pre>\n<h2 id=\"for\"><a href=\"#for\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>for</h2>\n<p>A <code class=\"language-text\">for</code> statement looks like the following. Note the placement of parentheses, spaces, and braces.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// for body</span>\n<span class=\"token punctuation\">}</span></pre>\n<h2 id=\"binary-operators\"><a href=\"#binary-operators\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Binary Operators</h2>\n<p>All binary artihmetic, comparison, and assignment operators MUST be preceded and followed by at least one space:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bar<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    foo <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    foo <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></pre>\n<h2 id=\"closures\"><a href=\"#closures\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Closures</h2>\n<p>Closures MUST be declared with a space after the <code class=\"language-text\">function</code> keyword.</p>\n<p>The opening brace MUST go on the same line, and the closing brace MUST go on the next line following the body.</p>\n<p>There MUST NOT be a space after the opening parenthesis of the argument list or variable list, and there MUST NOT be a space before the closing parenthesis of the argument list or variable list.</p>\n<p>In the argument list and variable list, there MUST NOT be a space before each comma, and there MUST be one space after each comma.</p>\n<p>A closure declaration looks like the following. Note the placement of parentheses, commas, spaces, and braces:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">closure</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// body</span>\n<span class=\"token punctuation\">}</span></pre>\n"}},"context":{}}