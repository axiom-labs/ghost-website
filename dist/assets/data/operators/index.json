{"hash":"fb59f7e01bc08ffdce15b2b56b97a3724d52628a","data":{"doc":{"title":"Operators","path":"/operators/","date":"2. May 2020","timeToRead":2,"content":"<p>An operator is something that takes one or more values (or expressions) and yields another value (so that the construction itself becomes an expression)</p>\n<p>Operators can be grouped according to the number of values they take. Unary operators take only one value, for example <code class=\"language-text\">!</code> (the logical not operator). Binary operators take two values, such as the familiar arithmetical operators <code class=\"language-text\">+</code> (plus) and <code class=\"language-text\">-</code> (minus). The majority of Ghost's operators fall into this category.</p>\n<h2 id=\"precedence-and-associativity\"><a href=\"#precedence-and-associativity\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Precedence and Associativity</h2>\n<p>The precedence of an operator specifies how \"tightly\" it binds two expressions together. For example, in the expression <code class=\"language-text\">1 + 5 * 3</code>, the answer is <code class=\"language-text\">16</code> and not <code class=\"language-text\">18</code> because the multiplication (<code class=\"language-text\">*</code>) operator has a higher precedence than the addition (<code class=\"language-text\">+</code>) operator. Parentheses may be used to force precedence, if necessary. For example, <code class=\"language-text\">(1 + 5) * 3</code> evaluates to <code class=\"language-text\">18</code>.</p>\n<p>When operators have equal precedence their associativity decides how the operators are grouped. For example, <code class=\"language-text\">=</code> is left-associative, so <code class=\"language-text\">1 - 2 - 3</code> is grouped as <code class=\"language-text\">(1 - 2) - 3</code> and evaluates to <code class=\"language-text\">-4</code>. <code class=\"language-text\">=</code> on the other hand is right-associative, so <code class=\"language-text\">a = b = c</code> is grouped as <code class=\"language-text\">a = (b = c)</code>.</p>\n<p>Use of parentheses, even when not strictly necessary, can often increase readability of the code by making grouping explicit rather than relying on the implicit operator precedence and associativity.</p>\n<p>The following table summarizes the operator precedence in Ghost, from highest to lowest. Operators in the same box have the same precedence.</p>\n<table>\n<thead>\n<tr>\n<th>Precedence</th>\n<th>Operator</th>\n<th>Description</th>\n<th>Associates</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><code class=\"language-text\">()</code> <code class=\"language-text\">.</code></td>\n<td>Grouping, Method call</td>\n<td>Left</td>\n</tr>\n<tr>\n<td>2</td>\n<td><code class=\"language-text\">-</code></td>\n<td>Negate</td>\n<td>Right</td>\n</tr>\n<tr>\n<td>3</td>\n<td><code class=\"language-text\">*</code> <code class=\"language-text\">/</code> <code class=\"language-text\">%</code></td>\n<td>Multiply, Divide, Modulo</td>\n<td>Left</td>\n</tr>\n<tr>\n<td>4</td>\n<td><code class=\"language-text\">+</code> <code class=\"language-text\">-</code></td>\n<td>Add, Subtract</td>\n<td>Left</td>\n</tr>\n<tr>\n<td>5</td>\n<td><code class=\"language-text\">&lt;</code> <code class=\"language-text\">&lt;=</code> <code class=\"language-text\">&gt;</code> <code class=\"language-text\">&gt;=</code></td>\n<td>Comparison</td>\n<td>Left</td>\n</tr>\n<tr>\n<td>6</td>\n<td><code class=\"language-text\">==</code> <code class=\"language-text\">!=</code></td>\n<td>Equals, Not equal</td>\n<td>Left</td>\n</tr>\n<tr>\n<td>7</td>\n<td><code class=\"language-text\">and</code></td>\n<td>Logical and</td>\n<td>Left</td>\n</tr>\n<tr>\n<td>8</td>\n<td><code class=\"language-text\">or</code></td>\n<td>Logical or</td>\n<td>Left</td>\n</tr>\n<tr>\n<td>9</td>\n<td><code class=\"language-text\">=</code></td>\n<td>Assignment</td>\n<td>Right</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"arithmetic-operators\"><a href=\"#arithmetic-operators\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Arithmetic Operators</h2>\n<p>Remember basic arithmetic from school? These work just like those.</p>\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Name</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">-a</code></td>\n<td>Negation</td>\n<td>Opposite of <code class=\"language-text\">a</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a + b</code></td>\n<td>Addition</td>\n<td>Sum of <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a - b</code></td>\n<td>Subtraction</td>\n<td>Difference of <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a * b</code></td>\n<td>Multiplication</td>\n<td>Product of <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a / b</code></td>\n<td>Division</td>\n<td>Quotient of <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a % b</code></td>\n<td>Modulo</td>\n<td>Remainder of <code class=\"language-text\">a</code> divided by <code class=\"language-text\">b</code>.</td>\n</tr>\n</tbody>\n</table>\n<p>The result of the modulo operator (<code class=\"language-text\">%</code>) has the same sign as the dividend - that is, the result of <code class=\"language-text\">a % b</code> will have the same sign as <code class=\"language-text\">a</code>. For example:</p>\n<pre class=\"language-javascript\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Prints 2</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">%</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Prints 2</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Prints -2</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token operator\">%</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Prints -2</span></pre>\n<h2 id=\"assignment-operator\"><a href=\"#assignment-operator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Assignment Operator</h2>\n<p>The basic assignment operator is <code class=\"language-text\">=</code>. This is NOT the same as \"equal to\". It means that the left operand gets set to the value of the expression on the right.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Prints 15</span></pre>\n<h2 id=\"comparison-operators\"><a href=\"#comparison-operators\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Comparison Operators</h2>\n<p>Comparison operators, as their name implies, allow you to compare two values.</p>\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Name</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">a == b</code></td>\n<td>Equal</td>\n<td><code class=\"language-text\">true</code> if <code class=\"language-text\">a</code> is equal to <code class=\"language-text\">b</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a != b</code></td>\n<td>Not equal</td>\n<td><code class=\"language-text\">true</code> if <code class=\"language-text\">a</code> is not equal to <code class=\"language-text\">b</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a &lt; b</code></td>\n<td>Less than</td>\n<td><code class=\"language-text\">true</code> if <code class=\"language-text\">a</code> is less than <code class=\"language-text\">b</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a &gt; b</code></td>\n<td>Greater than</td>\n<td><code class=\"language-text\">true</code> if <code class=\"language-text\">a</code> is greater than <code class=\"language-text\">b</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a &lt;= b</code></td>\n<td>Less than or equal to</td>\n<td><code class=\"language-text\">true</code> if <code class=\"language-text\">a</code> is less than or equal to <code class=\"language-text\">b</code>.</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">a &gt;= b</code></td>\n<td>Greater than or equal to</td>\n<td><code class=\"language-text\">true</code> if <code class=\"language-text\">a</code> is greater than or equal to <code class=\"language-text\">b</code>.</td>\n</tr>\n</tbody>\n</table>\n"}},"context":{}}