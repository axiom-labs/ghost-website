{"hash":"fb59f7e01bc08ffdce15b2b56b97a3724d52628a","data":{"doc":{"title":"Classes","path":"/classes/","date":"5. May 2020","timeToRead":3,"content":"<p>Classes define an objects <em>behavior</em> and <em>state</em>. Behavior is defined by <a href=\"/method-calls\">methods</a> which live in the class. Every object of the same class supports the same methods. State is defined in fields, whose values are stored in each instance.</p>\n<h2 id=\"defining-a-class\"><a href=\"#defining-a-class\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Defining A Class</h2>\n<p>Classes are created using the <code class=\"language-text\">class</code> keyword, unsurprisingly:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMaker</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>This creates a class named <code class=\"language-text\">CoffeeMaker</code> with no methods or fields.</p>\n<h2 id=\"methods\"><a href=\"#methods\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Methods</h2>\n<p>To add functionality to our coffee major, we need to give it methods.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMaker</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">brew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your coffee is now brewing.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>This defines a <code class=\"language-text\">brew</code> method that takes no arguments. To add parameters, put their names inside the parentheses:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMaker</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">brew</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dosage<span class=\"token punctuation\">,</span> temperature</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your \"</span> <span class=\"token operator\">+</span> dosage <span class=\"token operator\">+</span> <span class=\"token string\">\" of coffee is now brewing at \"</span> <span class=\"token operator\">+</span> temperature <span class=\"token operator\">+</span> <span class=\"token string\">\" degrees.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<h2 id=\"method-scope\"><a href=\"#method-scope\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Method Scope</h2>\n<p>Up to this point, \"<a href=\"/variables#scope\">scope</a>\" has been used to talk exclusively about <a href=\"/variables\">variables</a>. In a procedural language like C, or a functional one like Scheme, that's the only kind of scope there is. But object-oriented languages like Ghost introduce another kind of scope: <em>object scope</em>. It contains the methods that are available on an object. When you write:</p>\n<pre class=\"language-text\">Coffee.brew();</pre>\n<p>you're saying \"look up the method <code class=\"language-text\">brew</code> in the scope of the object <code class=\"language-text\">Coffee</code>\". In this case, the fact that you want to look up a <em>method</em> <code class=\"language-text\">brew</code> and not a <em>variable</em> is explicit. That's what <code class=\"language-text\">.</code> does and the object to the left of the period is the object you want to look up the method on.</p>\n<h3 id=\"this\"><a href=\"#this\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">this</code></h3>\n<p>Things get more interesting when you're inside the body of a method. When the method is called on some object and the body is being executed, you often need to access that object itself. You can do that using <code class=\"language-text\">this</code>.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMaker</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setGrind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grind</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">grind</span> <span class=\"token operator\">=</span> grind<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printGrind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setGrind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"course\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">grind</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>The <code class=\"language-text\">this</code> keyword works sort of like a variable, but has special behavior. It always refers to the instance whose method is currently being executed. This lets you invoke methods on \"yourself\".</p>\n<p>It's an error to refer to <code class=\"language-text\">this</code> outside of a method. However, it's perfectly fine to use it <em>inside</em> a method. When you do, <code class=\"language-text\">this</code> still refers to the instance whose <em>method</em> is being called:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMaker</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setGrind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grind</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">grind</span> <span class=\"token operator\">=</span> grind<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printGrindThrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setGrind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"course\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">grind</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>This is unlike Lua and JavaScript which can \"forget\" <code class=\"language-text\">this</code> when you create a callback inside a method. Ghost does what you want here and retains the reference to the original object.</p>\n<p>(In technical terms, a function's closure includes <code class=\"language-text\">this</code>. Ghost can do this because it makes a distinction between methods and functions.)</p>\n<h2 id=\"constructors\"><a href=\"#constructors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Constructors</h2>\n<p>We've seen how to define classes and how to declare methods on them. Our coffee maker can brew coffee, but we don't actually have any way to control it. To create <em>instances</em> of a class, we need a <em>constructor</em>. You define one like so:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMaker</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grind<span class=\"token punctuation\">,</span> temperature</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grind set to: \"</span> <span class=\"token operator\">+</span> grind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Temperature set to: \"</span> <span class=\"token operator\">+</span> temperature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>The <code class=\"language-text\">constructor</code> keyword says we're defining a constructor. To make a coffee maker now, we can now pass through the set arguments to customize our class:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">var</span> drip <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CoffeeMaker</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"flat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"200\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> chemex <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CoffeeMaker</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"coarse\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"202\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> pourOver <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CoffeeMaker</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"202\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> frenchPress <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">CoffeeMaker</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"very course\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"202\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<p>Note that we didn't need to call the <code class=\"language-text\">constructor</code> method directly. A constructor is actually a method on the class. When we reference a class using <code class=\"language-text\">()</code>, Ghost creates the new instance, then it invokes the <em>constructor</em> on that instance. This is where the constructor body you defined gets run.</p>\n<p>This distinction is important because it means inside the body of the constructor, you can access <code class=\"language-text\">this</code>, assign fields, etc.</p>\n<h2 id=\"fields\"><a href=\"#fields\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fields</h2>\n<p>All state stored in instances is stored in <em>fields</em>. Each field has a name, are bound to <code class=\"language-text\">this</code>, and act the same as variables.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CoffeeMaker</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">grind<span class=\"token punctuation\">,</span> temperature</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">grind</span> <span class=\"token operator\">=</span> grind<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">temperator</span> <span class=\"token operator\">=</span> temperature<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">printSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">printSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Grind set to: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">grind</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Temperature set to: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">temperature</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<h2 id=\"inheritance\"><a href=\"#inheritance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Inheritance</h2>\n<p>A class can inherit from a \"parent\" or <em>superclass</em>. When you invoke a method on an object of some class, if it can't be found, it walks up the chain of superclasses looking for it there.</p>\n<p>To inherit another class, use <code class=\"language-text\">extends</code> when you declare your class:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">foo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>This declares a new class Bar that inherits from Foo.</p>\n"}},"context":{}}