{"hash":"8ae61270dee5929d85a3852e2226b4f7c5280e1f","data":{"doc":{"title":"Functions","path":"/functions/","date":"30. April 2020","timeToRead":1,"content":"<p>Like Lua, functions are first-class values in Ghost. That means that functions can be stored in variables, passed as arguments to other functions, and returned as results. This gives great flexibility to the language.</p>\n<p>Since Ghost is an object-oriented programming language, most of your code will live in methods on classes, but functional programming is also supported, including nested functions with proper lexical scoping.</p>\n<h2 id=\"defining-functions\"><a href=\"#defining-functions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Defining Functions</h2>\n<p>You define functions using the <code class=\"language-text\">function</code> statement, followed by a list of parameters, and a body:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">printSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>The body of a function is always a block. Inside it, you can return a value using a <code class=\"language-text\">return</code> statement.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">returnSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>If execution reaches the end of the block without hitting a <code class=\"language-text\">return</code>, it implicitly returns <code class=\"language-text\">null</code>.</p>\n<h2 id=\"calling-functions\"><a href=\"#calling-functions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Calling Functions</h2>\n<p>Once you have a function, calling it is as simple as passing the required parameters along with the function name:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token function\">returnSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<p>The assigned value is the result of the functions <code class=\"language-text\">return</code> statement. As mentioned earlier, if no <code class=\"language-text\">return</code> statement is found within the function, a value of <code class=\"language-text\">null</code> will be returned implicitly.</p>\n<h2 id=\"closures\"><a href=\"#closures\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Closures</h2>\n<p>Functions are <em>first class</em> in Ghost, which just means they are real values that you can get a reference to, store in variables, pass around, etc.</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addPair</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">identity</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">identity</span><span class=\"token punctuation\">(</span>addPair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Prints \"3\"</span></pre>\n<p>Since function declarations are statements, you can declare local functions inside another function:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">outerFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">localFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm local!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">localFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>You can even combine local functions, first-class functions, and block scope:</p>\n<pre class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">returnFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> outside <span class=\"token operator\">=</span> <span class=\"token string\">\"outside\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>outside<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> inner<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> newFunction <span class=\"token operator\">=</span> <span class=\"token function\">returnFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">newFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Prints \"outside\"</span></pre>\n"}},"context":{}}