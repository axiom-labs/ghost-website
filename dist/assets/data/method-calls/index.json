{"hash":"d5be32200ffb93b74d937830c0f598e4406d1687","data":{"doc":{"title":"Method Calls","path":"/method-calls/","date":"29. April 2020","timeToRead":1,"content":"<p>Ghost is deeply object oriented, so most code consists of invoking methods on objects, usually something like this:</p>\n<pre class=\"language-javascript\">dog<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">speak</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Throw the ball!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<p>You have a <em>receiver</em> expression (here <code class=\"language-text\">dog</code>) followed by a <code class=\"language-text\">.</code>, then a name (<code class=\"language-text\">speak</code>) and an argument list in parentheses (<code class=\"language-text\">(&quot;Throw the ball!&quot;)</code>). Multiple arguments are separated by commas:</p>\n<pre class=\"language-javascript\">dog<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fetch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ball\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<p>The argument list can also be empty:</p>\n<pre class=\"language-javascript\">dog<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre>\n<p>The VM executes a method call like so:</p>\n<ol>\n<li>Evaluate the receiver and arguments from left to right.</li>\n<li>Look up the method on the receiver's class.</li>\n<li>Invoke it, psasing in the argument values.</li>\n</ol>\n"}},"context":{}}