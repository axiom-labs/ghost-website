{"hash":"debabfc5298e69e7bd7d73a37d4f13df2ff48dbb","data":{"doc":{"title":"Syntax","path":"/syntax/","date":"28. April 2020","timeToRead":1,"content":"<p>Ghost's syntax pulls a lot of influence from other C-like languages. In particular PHP, JavaScript, and Dart. It's designed to be familiar to those coming from these languages, with the aim to simple and predictable.</p>\n<p>Scripts are stored in plain text files with a <code class=\"language-text\">.ghost</code> file extension. Ghost does not compile ahead of time: programs are run directly from source, from top to bottom like any other scripting language.</p>\n<h2 id=\"comments\"><a href=\"#comments\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Comments</h2>\n<p>Line comments start with <code class=\"language-text\">//</code> and continue to the end of the line.</p>\n<pre class=\"language-javascript\"><span class=\"token comment\">// This is a comment</span></pre>\n<p>Comments behave like whitespace and are discarded during execution.</p>\n<h2 id=\"reserved-words\"><a href=\"#reserved-words\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reserved Words</h2>\n<p>Ghost has a small subset of reserved words used as predefined identifiers. None of the identifiers listed here should be used as identifiers in any of your scripts.</p>\n<pre class=\"language-text\">else false for if null return true var while</pre>\n<h2 id=\"identifiers\"><a href=\"#identifiers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Identifiers</h2>\n<p>Naming rules are similar to other programming languages. Identifiers must start with a letter or underscore and may then contain letters, digits, and underscores. Case is sensitive.</p>\n<pre class=\"language-text\">hello\ncamelCase\nPascalCase\n_under_score\nabc123\nALL_CAPS</pre>\n<h2 id=\"blocks\"><a href=\"#blocks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Blocks</h2>\n<p>Ghost uses curly braces to define <em>blocks</em>. You can use a block anywhere a statement is allowed, like in control flow statements.</p>\n<pre class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One statement.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Two statements.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></pre>\n"}},"context":{}}