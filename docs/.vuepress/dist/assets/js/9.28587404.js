(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{191:function(a,e,t){"use strict";t.r(e);var s=t(0),r=Object(s.a)({},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"grammar-and-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#grammar-and-types","aria-hidden":"true"}},[a._v("#")]),a._v(" Grammar and Types")]),a._v(" "),t("h2",{attrs:{id:"basics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#basics","aria-hidden":"true"}},[a._v("#")]),a._v(" Basics")]),a._v(" "),t("p",[a._v("Ghost borrows a lot of its syntax from other languages. Most notably from JavaScript, PHP, Python, and C.")]),a._v(" "),t("p",[a._v("Ghost uses the "),t("strong",[a._v("Unicode")]),a._v(' character set. For example, the word どうぶつ (which means "animal" in Japanese) could be used as a variable name.')]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("どうぶつ = 'dog';\n")])])]),t("p",[a._v("Ghost is also case-sensitive, so the variable "),t("code",[a._v("Message")]),a._v(" is not the same as "),t("code",[a._v("message")]),a._v(".")]),a._v(" "),t("p",[a._v("In Ghost, instructions are called statements and are separated by semicolons ("),t("code",[a._v(";")]),a._v(").")]),a._v(" "),t("p",[a._v("The source text of Ghost is scanned from left to right and is converted into a sequence of input elements which are tokens, comments, and whitespace.")]),a._v(" "),t("h2",{attrs:{id:"comments"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#comments","aria-hidden":"true"}},[a._v("#")]),a._v(" Comments")]),a._v(" "),t("p",[a._v("The syntax of comments is the same as in languages within the C family:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// This is an inline comment.\n\n/**\n * This is a block comment.\n * \n * It can span multiple lines.\n */\n")])])]),t("p",[a._v("Comments behave like whitespace and are discarded during execution.")]),a._v(" "),t("h2",{attrs:{id:"variables"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variables","aria-hidden":"true"}},[a._v("#")]),a._v(" Variables")]),a._v(" "),t("p",[a._v("You use variables as symbolic names for values in your application.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('answer = 42;\nfavoriteColor = "black";\npi = 3.14;\n')])])]),t("p",[a._v("Variables must be explicitely declared with an initial value.")]),a._v(" "),t("h2",{attrs:{id:"data-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-types","aria-hidden":"true"}},[a._v("#")]),a._v(" Data Types")]),a._v(" "),t("p",[a._v("Ghost defines five data types:")]),a._v(" "),t("ul",[t("li",[a._v("Arrays")]),a._v(" "),t("li",[a._v("Booleans")]),a._v(" "),t("li",[a._v("Numbers")]),a._v(" "),t("li",[a._v("Objects")]),a._v(" "),t("li",[a._v("Strings")])]),a._v(" "),t("h3",{attrs:{id:"arithmetic-operators"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arithmetic-operators","aria-hidden":"true"}},[a._v("#")]),a._v(" Arithmetic Operators")]),a._v(" "),t("p",[a._v("Ghost supports the following operators:")]),a._v(" "),t("ul",[t("li",[a._v("Addition ("),t("code",[a._v("+")]),a._v(")")]),a._v(" "),t("li",[a._v("Subtraction ("),t("code",[a._v("-")]),a._v(")")]),a._v(" "),t("li",[a._v("Multiplication ("),t("code",[a._v("*")]),a._v(")")]),a._v(" "),t("li",[a._v("Division ("),t("code",[a._v("/")]),a._v(")")]),a._v(" "),t("li",[a._v("Modulo ("),t("code",[a._v("%")]),a._v(")")]),a._v(" "),t("li",[a._v("Exponentiation ("),t("code",[a._v("^")]),a._v(")")])]),a._v(" "),t("h3",{attrs:{id:"bitwise-operators"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bitwise-operators","aria-hidden":"true"}},[a._v("#")]),a._v(" Bitwise Operators")]),a._v(" "),t("p",[a._v("Ghost supports the following bitwise operators:")]),a._v(" "),t("ul",[t("li",[a._v("And ("),t("code",[a._v("and")]),a._v(")")]),a._v(" "),t("li",[a._v("Or ("),t("code",[a._v("or")]),a._v(")")]),a._v(" "),t("li",[a._v("Not ("),t("code",[a._v("not")]),a._v(")")])]),a._v(" "),t("p",[a._v("These operators always result in a Boolean value, "),t("code",[a._v("true")]),a._v(" or "),t("code",[a._v("false")]),a._v(".")]),a._v(" "),t("h3",{attrs:{id:"relational-operators"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#relational-operators","aria-hidden":"true"}},[a._v("#")]),a._v(" Relational Operators")]),a._v(" "),t("p",[a._v("Ghost supports the following relational operators:")]),a._v(" "),t("ul",[t("li",[a._v("Equal ("),t("code",[a._v("==")]),a._v(")")]),a._v(" "),t("li",[a._v("Inequality ("),t("code",[a._v("!=")]),a._v(")")]),a._v(" "),t("li",[a._v("Less than ("),t("code",[a._v("<")]),a._v(")")]),a._v(" "),t("li",[a._v("Greater than ("),t("code",[a._v(">")]),a._v(")")]),a._v(" "),t("li",[a._v("Less than or equal ("),t("code",[a._v("<=")]),a._v(")")]),a._v(" "),t("li",[a._v("Greater than or equal ("),t("code",[a._v(">=")]),a._v(")")])]),a._v(" "),t("p",[a._v("These operators always result in a Boolean value, "),t("code",[a._v("true")]),a._v(" or "),t("code",[a._v("false")]),a._v(".")])])},[],!1,null,null,null);e.default=r.exports}}]);